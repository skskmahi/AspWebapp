// <auto-generated />
using System;
using LibraryData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryData.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LibraryData.Domain_Models.BranchHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Dow");

                    b.Property<int?>("LocationId");

                    b.Property<int>("ct");

                    b.Property<int>("opt");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("BranchHours");
                });

            modelBuilder.Entity("LibraryData.Domain_Models.Checkout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LibraryAssetId");

                    b.Property<int?>("LibraryCardId");

                    b.Property<DateTime>("since");

                    b.Property<DateTime>("until");

                    b.HasKey("Id");

                    b.HasIndex("LibraryAssetId");

                    b.HasIndex("LibraryCardId");

                    b.ToTable("Checkout");
                });

            modelBuilder.Entity("LibraryData.Domain_Models.CheckoutHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LibraryAssetId");

                    b.Property<int?>("LibraryCardId");

                    b.Property<DateTime?>("cin");

                    b.Property<DateTime>("cout");

                    b.HasKey("Id");

                    b.HasIndex("LibraryAssetId");

                    b.HasIndex("LibraryCardId");

                    b.ToTable("CheckoutHistory");
                });

            modelBuilder.Entity("LibraryData.Domain_Models.Hold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LibraryAssetId");

                    b.Property<int?>("LibraryCardId");

                    b.Property<DateTime>("hplaced");

                    b.HasKey("Id");

                    b.HasIndex("LibraryAssetId");

                    b.HasIndex("LibraryCardId");

                    b.ToTable("Hold");
                });

            modelBuilder.Entity("LibraryData.Domain_Models.LibraryAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("ImageURL");

                    b.Property<int?>("LocationId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("copies");

                    b.Property<decimal>("cost");

                    b.Property<int>("statusId");

                    b.Property<int>("year");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("statusId");

                    b.ToTable("LibraryAsset");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LibraryAsset");
                });

            modelBuilder.Entity("LibraryData.Domain_Models.LibraryBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Tphone")
                        .IsRequired();

                    b.Property<string>("URL");

                    b.Property<DateTime>("pdate");

                    b.HasKey("Id");

                    b.ToTable("LibraryBranch");
                });

            modelBuilder.Entity("LibraryData.Domain_Models.LibraryCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Fees");

                    b.Property<DateTime>("created");

                    b.HasKey("Id");

                    b.ToTable("LibraryCard");
                });

            modelBuilder.Entity("LibraryData.Domain_Models.Patron", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime>("Dob");

                    b.Property<string>("FName");

                    b.Property<int?>("HomeLibraryBranchId");

                    b.Property<string>("LName");

                    b.Property<int?>("LibrayCardId");

                    b.Property<string>("Phno");

                    b.HasKey("Id");

                    b.HasIndex("HomeLibraryBranchId");

                    b.HasIndex("LibrayCardId");

                    b.ToTable("Patrons");
                });

            modelBuilder.Entity("LibraryData.Domain_Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("desc")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("LibraryData.Domain_Models.Books", b =>
                {
                    b.HasBaseType("LibraryData.Domain_Models.LibraryAsset");

                    b.Property<string>("Author")
                        .IsRequired();

                    b.Property<string>("ISBN")
                        .IsRequired();

                    b.Property<string>("Index")
                        .IsRequired();

                    b.ToTable("Books");

                    b.HasDiscriminator().HasValue("Books");
                });

            modelBuilder.Entity("LibraryData.Domain_Models.Video", b =>
                {
                    b.HasBaseType("LibraryData.Domain_Models.LibraryAsset");

                    b.Property<string>("Director")
                        .IsRequired();

                    b.ToTable("Video");

                    b.HasDiscriminator().HasValue("Video");
                });

            modelBuilder.Entity("LibraryData.Domain_Models.BranchHours", b =>
                {
                    b.HasOne("LibraryData.Domain_Models.LibraryBranch", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("LibraryData.Domain_Models.Checkout", b =>
                {
                    b.HasOne("LibraryData.Domain_Models.LibraryAsset", "LibraryAsset")
                        .WithMany()
                        .HasForeignKey("LibraryAssetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LibraryData.Domain_Models.LibraryCard", "LibraryCard")
                        .WithMany("Checkout")
                        .HasForeignKey("LibraryCardId");
                });

            modelBuilder.Entity("LibraryData.Domain_Models.CheckoutHistory", b =>
                {
                    b.HasOne("LibraryData.Domain_Models.LibraryAsset", "LibraryAsset")
                        .WithMany()
                        .HasForeignKey("LibraryAssetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LibraryData.Domain_Models.LibraryCard", "LibraryCard")
                        .WithMany()
                        .HasForeignKey("LibraryCardId");
                });

            modelBuilder.Entity("LibraryData.Domain_Models.Hold", b =>
                {
                    b.HasOne("LibraryData.Domain_Models.LibraryAsset", "LibraryAsset")
                        .WithMany()
                        .HasForeignKey("LibraryAssetId");

                    b.HasOne("LibraryData.Domain_Models.LibraryCard", "LibraryCard")
                        .WithMany()
                        .HasForeignKey("LibraryCardId");
                });

            modelBuilder.Entity("LibraryData.Domain_Models.LibraryAsset", b =>
                {
                    b.HasOne("LibraryData.Domain_Models.LibraryBranch", "Location")
                        .WithMany("LibraryAsset")
                        .HasForeignKey("LocationId");

                    b.HasOne("LibraryData.Domain_Models.Status", "status")
                        .WithMany()
                        .HasForeignKey("statusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LibraryData.Domain_Models.Patron", b =>
                {
                    b.HasOne("LibraryData.Domain_Models.LibraryBranch", "HomeLibraryBranch")
                        .WithMany("Patrons")
                        .HasForeignKey("HomeLibraryBranchId");

                    b.HasOne("LibraryData.Domain_Models.LibraryCard", "LibrayCard")
                        .WithMany()
                        .HasForeignKey("LibrayCardId");
                });
#pragma warning restore 612, 618
        }
    }
}
